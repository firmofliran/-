<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <!--加载数据库的配置文件-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--  数据库连接池  -->
    <bean id="druidDataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="url"
                  value="${mysql.url}"></property>
        <property name="driverClassName" value="${mysql.driver}"></property>
        <property name="username" value="${mysql.username}"></property>
        <property name="password" value="${mysql.password}"></property>
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="3"/>
        <property name="minIdle" value="3"/>
        <property name="maxActive" value="3"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="3000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
    </bean>

    <!--  将sqlSessionFactory工厂 注入到spring容器中 -->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">
        <!--这里可以加载mybatis的配置文件-->
        <!-- <property name="configLocation" value="classpath:mybatis-config.xml"/>-->
        <property name="dataSource" ref="druidDataSource"/>
        <!--开启别名-->
        <property name="typeAliasesPackage" value="com.qf.pojo"/>

        <!-- mapper文件 如果和dao接口在同包且同名，则如下注入可以省略 -->
        <!--<property name="mapperLocations" value="classpath:com/qf/dao/*.xml"/>-->
    </bean>


    <!--扫描我们的mapper，为我们的mapper动态代理生成对应的实现类-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--注入工厂,如果只有一个工厂则可以省略不写-->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!--mapper接口所在的位置-->
        <property name="basePackage" value="com.qf.mapper"/>
    </bean>

    <!--事务管理-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="druidDataSource"></property>
    </bean>


    <!--用来支持@service @Component等注解的-->
    <context:component-scan base-package="com.qf">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--就是用来支持@transaction()注解的，开启后你就可以不用在配置文件中配置一些bean了-->
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <import resource="shiroSpring.xml"/>
</beans>